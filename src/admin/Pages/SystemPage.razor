@page "/system"
@namespace Rimrock.Helios.Admin.Pages
@using System.Diagnostics;
@using System.Linq;
@inject ILogger<SystemPage> Logger

<PageTitle>System</PageTitle>

<div class="mb-5">
    <form class="w-auto float-right" role="search" @onsubmit="FilterSubmit">
        <InputCheckbox @bind-Value="showOnlyDotnet" @bind-Value:after="OnShowOnlyDotNet" />
        <label>Only show dotnet applications</label>
        <input class="rounded border w-fit px-2 focus:outline-none" type="search" placeholder="Filter Processes"
        @bind-value="filterText" />
        <button class="bg-gray-700 rounded px-2 text-white hover:bg-blue-500" type="submit">Search</button>
    </form>
</div>
<section>
    <strong>Processes</strong>
    <table class="table-auto w-full">
        <thead class="bg-gray-800 text-white text-left">
            <tr>
                <th></th>
                <th>Id</th>
                <th>CPU</th>
                <th>Working Set</th>
                <th>Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var process in this.processes)
            {
                <tr @key="process.Id">
                    <td><i class="bi bi-eye-fill cursor-pointer"></i></td>
                    <td>@process.Id</td>
                    <td>@process.Cpu</td>
                    <td>@process.WorkingSet</td>
                    <td>@process.Name</td>
                </tr>
            }
        </tbody>
    </table>
</section>

<Spinner @bind-IsVisible="isBusy" />

@code {
    private bool showOnlyDotnet;

    private string? filterText;

    private bool isBusy;

    private List<SimpleProcess> processes = new();

    private async Task<bool> FilterSubmit()
    {
        this.Logger.LogTrace("FilterSubmit {filter}", this.filterText);
        await this.GetProcessesAsync();
        this.StateHasChanged();
        return false;
    }

    private async Task GetProcessesAsync()
    {
        this.Logger.LogTrace("GetProcessesAsync");
        this.isBusy = true;
        this.StateHasChanged();
        await Task.Run(() =>
        {
            List<SimpleProcess> processes = new();
            processes.AddRange(this.GetProcesses().Where(_ => !showOnlyDotnet || _.Modules.Contains("mscorlib.dll") ||
    _.Modules.Contains("mscorlib.ni.dll")).Where(_ => string.IsNullOrEmpty(this.filterText) ||
    _.Name.Contains(this.filterText, StringComparison.OrdinalIgnoreCase)).OrderBy(_ => _.Name));
            this.processes = processes;
            this.isBusy = false;
        });
    }

    protected override async Task OnInitializedAsync()
    {
        this.Logger.LogTrace("OnInitializedAsync");
        await this.GetProcessesAsync();
    }

    private async Task OnShowOnlyDotNet()
    {
        this.Logger.LogTrace("OnShowOnlyDotNet");
        await this.GetProcessesAsync();
        this.StateHasChanged();
    }


    private IEnumerable<SimpleProcess> GetProcesses()
    {
        foreach (var process in Process.GetProcesses())
        {
            SimpleProcess? p = null;
            try
            {
                p = new SimpleProcess()
                    {
                        Id = process.Id,
                        Name = process.ProcessName,
                        Modules = this.showOnlyDotnet ? process.Modules.Cast<ProcessModule>().Select(_ =>
                        _.ModuleName).ToHashSet(StringComparer.OrdinalIgnoreCase) : new HashSet<string>(),
                        Cpu = process.TotalProcessorTime,
                        WorkingSet = process.WorkingSet64,
                    };
            }
            catch
            {
            }

            if (p != null)
            {
                yield return p;
            }

            process.Dispose();
        }
    }

    private class SimpleProcess
    {
        public required int Id { get; init; }

        public required string Name { get; init; }

        public required IReadOnlySet<string> Modules { get; init; }

        public required TimeSpan Cpu { get; init; }

        public required long WorkingSet { get; init; }
    }
}